name: Build Android meta
run-name: Creating Production Ready Android App ðŸš€ M
on:
  workflow_dispatch:

jobs:
  build:
    name: Build APK meta
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: meta

      - name: Install Build Tools and jq
        run: sudo apt-get update && sudo apt-get install -y hub zipalign apksigner jq

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19.x

      - name: Install dependencies
        run: npm ci

      - name: Download and prepare web assets (metacubexd dist)
        run: |
          echo "Downloading gh-pages..."
          wget https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip
          unzip -q gh-pages.zip
          EXTRACTED_DIR="metacubexd-gh-pages"
          WEB_DIR="www"
          rm -rf $WEB_DIR
          mkdir -p $WEB_DIR
          if [ -d "$EXTRACTED_DIR/dist" ]; then
            mv $EXTRACTED_DIR/dist/* $WEB_DIR/
          else
            shopt -s dotglob
            mv $EXTRACTED_DIR/* $WEB_DIR/
            shopt -u dotglob
          fi
          rm gh-pages.zip
          rm -rf $EXTRACTED_DIR
          ls -l $WEB_DIR

      - name: Clean Android Directory Before Add/Sync
        run: |
          if [ -d "android" ]; then
            rm -rf android/
          fi

      - name: Explicitly Add Android Platform
        run: npx cap add android

      - name: Capacitor Sync Android
        run: npx cap sync android 

      - name: Generate icons and splash screen to android folder
        run: |
          if [ -d "./resources" ]; then
            echo "Generating app icons and splash screen..."
            npm install @capacitor/assets --save-dev
            npx capacitor-assets generate --android
          else
            echo "'resources' folder not found. Skipping icon generation."
          fi

      - name: AndroidManifestModify
        run: |
          if [ -f "AndroidManifest.xml" ]; then
            cp AndroidManifest.xml android/app/src/main/AndroidManifest.xml
          fi

      - name: Build unsigned app
        run: cd android && ./gradlew assembleRelease

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign release build
        run: |
          UNSIGNED_APK="./android/app/build/outputs/apk/release/app-release-unsigned.apk"
          ALIGNED_APK="./android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk"
          SIGNED_APK="./android/app/build/outputs/apk/release/app-release-signed.apk"
          zipalign -v 4 "$UNSIGNED_APK" "$ALIGNED_APK"
          apksigner sign \
            --ks android/release.decrypted.jks \
            --ks-key-alias release \
            --ks-pass pass:${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            --out "$SIGNED_APK" \
            "$ALIGNED_APK"
          ls -l ./android/app/build/outputs/apk/release/

      - name: Fetch Latest Tag from metacubexd
        id: get_metacubexd_tag
        run: |
          METACUBEXD_REPO="MetaCubeX/metacubexd"
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/$METACUBEXD_REPO/releases/latest" | jq -r .tag_name)
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
            exit 1
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Set Build Timestamp Tag
        id: current-datetime
        run: echo "CURRENT_DATETIME=$(date +'%Y-%m-%d-%H_%M_%S%z')" >> "$GITHUB_OUTPUT"

      - name: Upload build output artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ steps.get_metacubexd_tag.outputs.LATEST_TAG }}-${{ steps.current-datetime.outputs.CURRENT_DATETIME }}
          path: |
             ./android/app/build/outputs/apk/release/app-release-signed.apk
             ./android/app/build/outputs/apk/release/output-metadata.json
             ./android/app/build/outputs/mapping/release/mapping.txt
          if-no-files-found: warn
          retention-days: 5

      - name: Rename Signed APK
        id: rename_apk
        run: |
          VERSION_NAME="${{ steps.get_metacubexd_tag.outputs.LATEST_TAG }}"
          SOURCE_APK="./android/app/build/outputs/apk/release/app-release-signed.apk"
          SANITIZED_VERSION_NAME=$(echo "$VERSION_NAME" | sed 's/[^a-zA-Z0-9._-]/_/g')
          FINAL_APK_NAME="Azlaneui-${SANITIZED_VERSION_NAME}.apk"
          mv "$SOURCE_APK" "$FINAL_APK_NAME"
          echo "FINAL_APK_PATH=$FINAL_APK_NAME" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-metaboard
          name: Azlaneui ${{ steps.get_metacubexd_tag.outputs.LATEST_TAG }} (meta)
          body: |
            Android build corresponding to metacubexd release tag: **${{ steps.get_metacubexd_tag.outputs.LATEST_TAG }} (meta)**
            Generated by GitHub Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          files: ${{ steps.rename_apk.outputs.FINAL_APK_PATH }}
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
