name: Build Android zash
run-name: Creating Production Ready Android App 🚀 Z
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # 每周日 UTC 0 点检查一次最新 release

jobs:
  build:
    name: Build APK zash
    runs-on: ubuntu-latest
    steps:
      # -------------------- Checkout & Dependencies --------------------
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: zash 

      - name: Install Build Tools and jq
        run: sudo apt-get update && sudo apt-get install -y hub zipalign apksigner jq 

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19.x

      - name: Install dependencies
        run: npm ci

      # -------------------- Fetch Latest Zashboard Release --------------------
      - name: Check for new Zashboard release
        id: check_new_release
        run: |
          ZASHBOARD_REPO="Zephyruso/zashboard"
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/$ZASHBOARD_REPO/releases/latest" | jq -r .tag_name)
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
            echo "::error::Could not fetch latest tag from $ZASHBOARD_REPO"
            exit 1
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

          # 上一次构建的 tag (可通过 artifact 或 release 保存)
          LAST_TAG_FILE="last_build_tag.txt"
          LAST_TAG=$(cat $LAST_TAG_FILE 2>/dev/null || echo "")
          echo "LAST_TAG=$LAST_TAG"

          if [ "$LATEST_TAG" = "$LAST_TAG" ]; then
            echo "No new release, skipping build."
            exit 78

          fi
          echo "SAVED_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

      # -------------------- Download Web Assets --------------------
      - name: Download gh pages (zashboard dist)
        run: |
          wget https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip
          unzip dist.zip

      # -------------------- Capacitor & Android --------------------
      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then npx cap add android; fi

      - name: Capacitor update
        run: npx cap update

      - name: Capacitor copy
        run: npx cap copy

      - name: Generate icons and splash screen
        run: |
          if [ -d "./resources" ]; then
            echo "Generating icons and splash screen..."
            npm install @capacitor/assets --save-dev
            npx capacitor-assets generate --android
          else
            echo "No resources folder found, skipping icon generation."
          fi

      - name: AndroidManifestModify
        run: |
          if [ -f "AndroidManifest.xml" ]; then
            cp AndroidManifest.xml android/app/src/main/AndroidManifest.xml
          fi

      - name: Build app
        run: cd android && ./gradlew assembleRelease

      - name: Extract Android signing key
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign APK
        run: |
          zipalign -v 4 ./android/app/build/outputs/apk/release/app-release-unsigned.apk ./android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk
          apksigner sign --ks android/release.decrypted.jks \
            --ks-key-alias release \
            --ks-pass pass:${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
            --out ./android/app/build/outputs/apk/release/app-release-signed.apk \
            ./android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk

      # -------------------- Tag & Timestamp --------------------
      - name: Set Build Timestamp
        id: current-datetime
        run: echo "CURRENT_DATETIME=$(date +'%Y-%m-%d-%H_%M_%S%z')" >> "$GITHUB_OUTPUT"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ steps.check_new_release.outputs.SAVED_TAG }}-${{ steps.current-datetime.outputs.CURRENT_DATETIME }}
          path: ./android/app/build/outputs/apk/release/

      - name: Rename APK
        id: rename_apk
        run: |
          VERSION_NAME="${{ steps.check_new_release.outputs.SAVED_TAG }}"
          SOURCE_APK="./android/app/build/outputs/apk/release/app-release-signed.apk"
          SANITIZED_VERSION_NAME=$(echo "$VERSION_NAME" | sed 's/[^a-zA-Z0-9._-]/_/g')
          FINAL_APK_NAME="Azlaneui-${SANITIZED_VERSION_NAME}.apk"
          mv "$SOURCE_APK" "$FINAL_APK_NAME"
          echo "FINAL_APK_PATH=$FINAL_APK_NAME" >> $GITHUB_OUTPUT

      - name: Upload APK to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-zashboard
          name: Azlaneui ${{ steps.check_new_release.outputs.SAVED_TAG }} (zash)
          body: |
            Android build corresponding to zashboard release tag: **${{ steps.check_new_release.outputs.SAVED_TAG }} (zash)**
            Generated by GitHub Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            Triggered by: ${{ github.actor }}
            Build Timestamp: ${{ steps.current-datetime.outputs.CURRENT_DATETIME }}
          files: ${{ steps.rename_apk.outputs.FINAL_APK_PATH }}
          prerelease: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # -------------------- Update Last Build Tag --------------------
      - name: Save last build tag
        run: |
          echo "${{ steps.check_new_release.outputs.SAVED_TAG }}" > last_build_tag.txt
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add last_build_tag.txt
          git commit -m "Update last build tag to ${{ steps.check_new_release.outputs.SAVED_TAG }}"
          git push
