name: Build Android zash
run-name: Creating Production Ready Android App ðŸš€ Z
on:
  workflow_dispatch:

jobs:
  build:
    name: Build APK zash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: zash

      - name: Install HUB
        run: sudo apt-get update && sudo apt-get install -y hub zipalign apksigner

      - name: download gh pages
        run: |
          wget https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip
          unzip dist.zip
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19.x

      - name: install dependencies
        run: npm ci	

      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then npx cap add android; fi

      - name: Capacitor update
        run: npx cap update

      - name: Capacitor copy
        run: npx cap copy

      - name: Generate icons and splash screen to android folder 
        run:  if [ -d "./resources" ]; then npm install @capacitor/assets --save-dev && npx capacitor-assets generate --android; fi

      - name: AndroidManifestModify
        run: rm android/app/src/main/AndroidManifest.xml && cp AndroidManifest.xml android/app/src/main/AndroidManifest.xml

      - name: Build app
        run: cd android && ./gradlew assembleRelease

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks
      - name: Sign dev build
        run: |
          zipalign 4 ./android/app/build/outputs/apk/release/app-release-unsigned.apk ./android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk 
          apksigner sign --ks android/release.decrypted.jks \
          --ks-key-alias release \
          --ks-pass pass:${{ secrets.RELEASE_KEYSTORE_PASSWORD }} \
          --out ./android/app/build/outputs/apk/release/app-release-signed.apk \
          ./android/app/build/outputs/apk/release/app-release-unsigned-aligned.apk
      - name: Set Tag
        id: current-datetime
        run: echo "CURRENT_DATETIME=$(date +'%Y-%m-%d-%H_%M_%S%z')" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ./android/app/build/outputs/

      - name: Create Original ZIP Archive
        run: |
          mkdir -p build-output/apk/release
          cp android/app/build/outputs/apk/release/app-release-signed.apk build-output/apk/release/
          zip -r build-output.zip build-output

      - name: Extract Signed APK
        run: |
          mkdir -p extracted_apk

          cd extracted_apk
          unzip -j ../build-output.zip 'build-output/apk/release/app-release-signed.apk'

          cd ..
          echo "APK extracted to extracted_apk/app-release-signed.apk"
          ls -l extracted_apk/

      - name: Verify build.gradle
        run: |
          GRADLE_FILE="android/app/build.gradle"
          echo "Checking for Gradle file at: $GRADLE_FILE"
          ls -l "$GRADLE_FILE"
          echo "--- Relevant content of $GRADLE_FILE ---"
          # Show lines around 'versionName' for context
          grep -C 5 'versionName' "$GRADLE_FILE" || echo "INFO: 'versionName' not found via simple grep, checking file existence."
          if [ ! -f "$GRADLE_FILE" ]; then
              echo "ERROR: Gradle file not found or unreadable."
          fi
          echo "---------------------------------------"

      - name: Get Version Name from Gradle
        id: get_version_name_gradle 
        run: |
          GRADLE_FILE="android/app/build.gradle"
          if [ ! -f "$GRADLE_FILE" ]; then
            echo "::error::build.gradle file not found at $GRADLE_FILE"
            exit 1
          fi
          # Extract versionName using grep and sed. Handles single or double quotes and whitespace.
          # It looks for lines starting with 'versionName' (potentially indented)
          VERSION_NAME=$(grep -E '^\s*versionName\s+' "$GRADLE_FILE" | sed -E 's/^\s*versionName\s+["'\'']([^"'"'"']+).*/\1/' | head -n 1)
          # Explanation:
          # grep -E '^\s*versionName\s+': Find lines starting with optional space, then 'versionName', then space(s).
          # sed -E 's/^\s*versionName\s+["'\'']([^"'"'"']+).*/\1/':
          #   ^\s*versionName\s+: Match the start and 'versionName' part.
          #   ["'\'']: Match the opening single or double quote.
          #   ([^"'"'"']+): Capture everything that is NOT a quote (the version name).
          #   ["'\'']: Match the closing quote.
          #   .*: Match the rest.
          #   \1: Replace with the captured group (version name).
          # head -n 1: Take only the first match if multiple lines somehow match (unlikely for versionName).
          if [ -z "$VERSION_NAME" ]; then
            echo "::error::Could not extract versionName from $GRADLE_FILE."
            echo "File content around 'versionName' was:"
            grep -C 5 'versionName' "$GRADLE_FILE" || echo "(grep found nothing)"
            exit 1
          fi
          echo "Successfully extracted VERSION_NAME from Gradle: $VERSION_NAME"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Rename APK
        id: rename_apk
        run: |
          # Use the output from the Gradle step
          VERSION_NAME="${{ steps.get_version_name_gradle.outputs.VERSION_NAME }}"
          echo "Using VERSION_NAME for renaming: $VERSION_NAME" # Debug log
          if [ -z "$VERSION_NAME" ]; then
            echo "::error::VERSION_NAME is empty in Rename step. This should not happen."
            exit 1
          fi
          SOURCE_APK="extracted_apk/app-release-signed.apk"
          FINAL_APK_NAME="${VERSION_NAME}.apk" # Target name in the root directory
          if [ ! -f "$SOURCE_APK" ]; then
             echo "::error::Source APK '$SOURCE_APK' not found!"
             echo "Contents of extracted_apk directory:"
             ls -l extracted_apk/
             exit 1
          fi
          echo "Moving '$SOURCE_APK' to '$FINAL_APK_NAME'"
          mv "$SOURCE_APK" "$FINAL_APK_NAME"
          echo "Successfully renamed APK to $FINAL_APK_NAME"
          echo "FINAL_APK_PATH=$FINAL_APK_NAME" >> $GITHUB_OUTPUT # Output the final path/name relative to workspace root
      - name: Verify Renamed APK
        run: |
          echo "Verifying renamed file:"
          ls -l "${{ steps.rename_apk.outputs.FINAL_APK_PATH }}" || echo "::error::Verification failed: Renamed file not found!"
      - name: Upload APK to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest-android 
          name: azlaneui ${{ steps.get_version_name_gradle.outputs.VERSION_NAME }} (zash) 
          body: |
            Android release ${{ steps.get_version_name_gradle.outputs.VERSION_NAME }} generated by GitHub Actions.
            Triggered by: ${{ github.actor }}
          files: ${{ steps.rename_apk.outputs.FINAL_APK_PATH }} 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
